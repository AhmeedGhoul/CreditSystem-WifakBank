// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId           Int         @id @default(autoincrement())
  firstName        String      @db.VarChar(100)
  lastName         String      @db.VarChar(100)
  email            String      @unique @db.VarChar(255)
  password         String      @db.VarChar(255)
  age              Int         @default(18)
  adress           String      @db.Text
  phoneNumber      Int
  userScore        Float       @default(0)
  roles            Role[]      @relation("UserRoles")
  civilStatus      CivilStatus
  dateOfBirth      DateTime
  isEnabled        Boolean     @default(true)
  isAccountBlocked Boolean     @default(false)
  createdDate      DateTime    @default(now())
  lastModifiedDate DateTime    @updatedAt

  ActivityLogs ActivityLog[]
  Contracts    Contracts[]
  Requests     Request[]
  Garents      Garent[]
  accounts     Account[]

  Notification       Notification[]
  ReplacementRequest ReplacementRequest[]

  GarentInvitation GarentInvitation[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[] @relation("UserRoles")
}

model Audit {
  auditId     Int         @id @default(autoincrement())
  auditStatus AuditStatus
  auditOutput String      @db.Text
  auditDate   DateTime    @default(now())
  auditType   AuditType

  activityLogs ActivityLog[]

  Fraud_Case Fraud_Case[]
}

enum ReplacementRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ReplacementRequest {
  id                Int                      @id @default(autoincrement())
  creditPoolId      Int
  userId            Int
  replacementEmail  String                   @db.VarChar(255)
  status            ReplacementRequestStatus @default(PENDING)
  confirmationToken String                   @unique
  createdAt         DateTime                 @default(now())

  creditPool Credit_Pool @relation(fields: [creditPoolId], references: [creditPoolId])
  user       User        @relation(fields: [userId], references: [userId])

  @@map("replacement_requests")
}

model ActivityLog {
  activityLogId          Int      @id @default(autoincrement())
  activityLogName        String
  activityLogDescription String
  activityDate           DateTime @default(now())
  ipAddress              String
  country                String

  auditId    Int?
  audit      Audit? @relation(fields: [auditId], references: [auditId])
  User       User?  @relation(fields: [userUserId], references: [userId])
  userUserId Int?
}

model Fraud_Case {
  fraudCaseId   Int           @id @default(autoincrement())
  fraudCaseType FraudCaseType
  detectionDate DateTime      @default(now())
  caseStatus    CaseStatus

  audit   Audit? @relation(fields: [auditId], references: [auditId])
  auditId Int?
}

model Document {
  documentId   Int      @id @default(autoincrement())
  originalName String
  filePath     String
  mimeType     String
  size         Int
  documentDate DateTime
  requestId    Int?
  Request      Request? @relation(fields: [requestId], references: [requestId])
}

model Request {
  requestId                  Int      @id @default(autoincrement())
  requestDate                DateTime @default(now())
  isRequestApprovedByAgent   Boolean  @default(false)
  isRequestApprovedByAuditor Boolean  @default(false)

  purpose             String?
  employmentStatus    Employment?
  yearsOfEmployment   Int?
  monthlyIncome       Float?
  otherIncomeSources  String?
  existingLoans       Boolean?
  totalLoanAmount     Float?
  monthlyLoanPayments Float?
  numberOfHouses      Int?
  estimatedHouseValue Float?
  numberOfCars        Int?
  estimatedCarValue   Float?
  bankSavings         Float?
  otherAssets         String?
  hasCriminalRecord   Boolean?
  User                User?       @relation(fields: [userUserId], references: [userId])
  userUserId          Int?
  Documents           Document[]
}

model Credit_Pool_Payment {
  creditPoolPaymentId Int        @id @default(autoincrement())
  MaximumDate         DateTime
  PaymentDate         DateTime
  isPayed             Boolean    @default(false)
  amount              Float
  contract            Contracts? @relation(fields: [contractId], references: [contractId])
  contractId          Int?
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Contracts {
  contractId   Int      @id @default(autoincrement())
  contractDate DateTime @default(now())
  amount       Float
  period       Int
  frequency    Int      @default(3)
  pdfUrl       String?
  rank         Int      @default(0)
  isCashouted  Boolean  @default(false)
  User         User?    @relation(fields: [userUserId], references: [userId])
  userUserId   Int?

  credit_Pool_Payment Credit_Pool_Payment[]
  credit_Pool         Credit_Pool?          @relation(fields: [creditPoolId], references: [creditPoolId])
  creditPoolId        Int?
}

model Credit_Pool {
  creditPoolId       Int                  @id @default(autoincrement())
  maxPeople          Int                  @default(0)
  Frequency          Int                  @default(1)
  Period             Int                  @default(3)
  FinalValue         Int
  isFull             Boolean              @default(false)
  contracts          Contracts[]
  ReplacementRequest ReplacementRequest[]
}

model Garent {
  garentId    Int    @id
  firstName   String @db.VarChar(100)
  lastName    String @db.VarChar(100)
  phoneNumber Int
  User        User?  @relation(fields: [userUserId], references: [userId])
  userUserId  Int?
}

model GarentInvitation {
  token       String   @id
  email       String   @db.VarChar(255)
  invitedById Int
  invitedBy   User     @relation(fields: [invitedById], references: [userId])
  createdAt   DateTime @default(now())
}

model Account {
  accountId             Int      @id @default(autoincrement())
  openDate              DateTime @default(now())
  balance               Float    @default(0)
  trackingNumber        Int      @unique
  linkedUserId          Int
  user                  User     @relation(fields: [linkedUserId], references: [userId])
  stripePaymentIntentId String?
}

enum UserRole {
  Admin
  Client
  Agent
  Auditor
}

enum AuditStatus {
  PENDING
  Paused
  APPROVED
  REJECTED
}

enum Employment {
  Employed
  Self_Employed
  Unemployed
  Student
}

enum CivilStatus {
  Married
  Divorced
  Single
  Widow
}

enum FraudCaseType {
  IDENTITY_THEFT
  ACCOUNT_TAKEOVER
  FAKE_DOCUMENT
}

enum AuditType {
  Finacial
  compliance
  Risk
}

enum CaseStatus {
  OPEN
  CLOSED
  UNDER_INVESTIGATION
}
